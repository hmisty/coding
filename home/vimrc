set nocompatible
filetype off	"required by vundle

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

"-- let Vundle manage Vundle
"-- required! 
Bundle 'gmarik/vundle'

"-- My Bundles here:
"$ mvim +BundleInstall +qall
"-- original repos on github

"-- Ethereum solidity
Plugin 'tomlion/vim-solidity'
"-- nodejs
Bundle "myhere/vim-nodejs-complete"
"-- motion
Bundle 'Lokaltog/vim-easymotion'
:let mapleader=","
"-- colorscheme
Bundle 'nielsmadan/harlequin'
":colorscheme harlequin
:colorscheme desert
"-- auto complete
"Bundle 'Valloric/YouCompleteMe'
Bundle 'ervandew/supertab'
"-- javascript
Bundle 'pangloss/vim-javascript'
"-- clojure
Bundle 'guns/vim-clojure-static'
Bundle 'kien/rainbow_parentheses.vim'
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
Bundle 'tpope/vim-sensible'
Bundle 'vim-scripts/paredit.vim'

" for clojure REPL support
"Bundle 'tpope/vim-salve'
"Bundle 'tpope/vim-projectionist'
"Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-fireplace'

"-- java cp
Bundle 'tpope/vim-classpath'

"-- dir tree
Bundle 'scrooloose/nerdtree'
"-- auto snippet
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "garbas/vim-snipmate"
Bundle "honza/vim-snippets"
imap <C-J> <Plug>snipMateNextOrTrigger
smap <C-J> <Plug>snipMateNextOrTrigger
"-- other
Bundle 'godlygeek/tabular'
"-- vim-scripts repos
Bundle 'L9'
Bundle 'FuzzyFinder'
"-- non github repos
"Bundle 'git://git.wincent.com/command-t.git'
"-- git repos on your local machine (ie. when working on your own plugin)
"Bundle 'file:///Users/gmarik/path/to/plugin'
"-- indent python
Bundle "vim-scripts/indentpython.vim"
Bundle "nvie/vim-flake8"
"-- drawIt
Bundle "vim-scripts/DrawIt"

"-- vim-pathogen loader --"
"execute pathogen#infect()

"-- manual config --"
set viminfo+=!
set modelines=1
set nu

" highlight current line
"TEMPORARY XXX
"au WinLeave * set nocursorline nocursorcolumn
"au WinEnter * set cursorline cursorcolumn
"set cursorline cursorcolumn

" for macvim
if has("gui_running")
    set go=aAce  " remove toolbar
    set transparency=5
    set guifont=Monaco:h13
    set showtabline=2
    set columns=100
    set lines=40
    "noremap <D-M-Left> :tabprevious<cr>
    "noremap <D-M-Right> :tabnext<cr>
    "map <D-1> 1gt
    "map <D-2> 2gt
    "map <D-3> 3gt
    "map <D-4> 4gt
    "map <D-5> 5gt
    "map <D-6> 6gt
    "map <D-7> 7gt
    "map <D-8> 8gt
    "map <D-9> 9gt
    "map <D-0> :tablast<CR>
endif

"-- old --"
source $VIMRUNTIME/vimrc_example.vim
set nobackup
set shiftwidth=2
set softtabstop=2
set tabstop=2
set autoindent
set smarttab
set formatoptions=croql
set encoding=utf-8
" don't expandtab by default. e.g. github markdown use TAB for auto code block
"set expandtab

"
" for python, ref: https://segmentfault.com/a/1190000003962806
" highlight unnecessary whitespaces
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
" PEP8 compliant; also applied to solidity src
au BufNewFile,BufRead *.py,*.sol
      \ set tabstop=4 |
      \ set softtabstop=4 |
      \ set shiftwidth=4 |
      \ set textwidth=79 |
      \ set expandtab |
      \ set autoindent |
      \ set fileformat=unix
"
" 让vim记忆上次编辑的位置  
if has("autocmd")  
autocmd BufReadPost *   
    \if line("'\"")>0 && line("'\"")<=line("$") |  
    \   exe "normal! g`\"" |  
    \endif  
endif

